git config --list

git config --list --show-origin 

git config --global user.name "insert username here"
git config --global user.email "enter your github user email"

git log filename   : allows to see commit history for a file 

git show <name-of-file>  :   To see the changes in a file

git diff <version1_oldOne> <version2_newOne>  :  allows to see the differences between two versions 

git reset returns to a pint in time, 2 types --hard (take care of this) / --soft (keeps what is on staging)

git log --stat : you may be able to see specific changes on a file on each commit

to see how was a previous version ofa file 
git chekout <commit> <filename>
with 
git master <filename> 
return to the version on master

git clone url  - clone a repository to make changes locally

git commit -am   : execute the add also, but only works with files that i previously add

git merge : need to be run on the branch you want to bring your changes to, seldom master telling from which branch
you will want to bring the changes

git branch : allow to see the existing branches on your repo 

git merge : to merge, remember merge is basically a commit so you need to add a message as well


TO ADD A NEW BRANCH
Note: Remember that it is created from the place i am.
git show
git branch <name>
git status
git show : observe you point to master and new branch

moving to the new branch
git checkout <name>

to send this to github you need to add the public repo as origin
$git remote add origin <Repo's URL>
you must be inside the directory of your project 

$git remote -v 
shows push (send) and fetch(bring) urls 

to send code to github 
$git push origin master
or
$git push --set-upstream <name selected> master 

to bring changes to master 
$git pull origin master

but if you get an error with histories between local and public
$git pull origin master --allow-unrelated-histories 

To see configs as username or email 
$git config -l 
to change the email
$git config --global user.email "new_email"

Generate a new sshkey
$ssh-keygen -t rsa -b 4096 -C "youremail@example.com"

test process a add it(Mac)
eval "$(ssh-agent -s)"

macOS Sierra or older 
do:
cd ~/.ssh
create a config file
    -Vim vim config
    -VSCode code config
paste:
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa

  
add your key
ssh-add -K ~/.ssh/id_rsa

to change the origin from https to ssh 
git remote set-url origin <url obtained from github>

if you want to see all the commits and a graphic line for detailings 
$git log --all --graph --decorate --oneline

To create a TAG on a specific version
1st copy the hash of that version 
$git tag -a v0.1 -m "first release to github" 2a07a64

new you can se the tags on:
$git log
$git tag
gi show-ref --tags 

this last one shows a line with the hash associated to a tag in one line as for example "dcf0e5b9edc2425ffdc0a88cb78a911b5488085f refs/tags/v0.1"
The tag showed on the command is diff asi this is like a commit 
new you need to push the tag to internet (github)
$git push origin master --tags

this will push only the tags 

To delete a tag use:
git tag -d <name_of_The_Tag_To_delete>

but it is almost certain that this will not delete the tag so you will need to use the following :
"git push origin master :refs/tags/<name_of_the_Tag_to_delete>

To see the branches and they histories 
$git show-branch
$git show-branch --all

$gitk  opens in a software the history in a visual way

Remember to create a new branch, from master 
$git branch <name of branch> 
it will show no change but the branch is created

you need to make a push in order for these branches to be seen in github 

If you have 2 devs working on 2 branches they need to push their code on their branch 
then you go to master
pull those changes
$git merge <name_of_the_branch_you_want_to_bring_your_changes_from>
git push origin master

To merge a branch to master we need a Pull Request
